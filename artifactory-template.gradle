if(!project.hasProperty('artifactoryUser') || !project.hasProperty('artifactoryPassword')) {
    System.err.println 'artifactoryUser or artifactoryPassword is not defined! artifactoryPublish will be disabled.'   
} else {
    artifactory {
        contextUrl = 'http://jartifacts.longlinkislong.com'
        publish {
            repository {
                repoKey = "libs-${buildType}-local"
                username = "${artifactoryUser}"
                password = "${artifactoryPassword}"
                maven = true
            }
            defaults {
                publications ('mavenJava')
            }
        }    
    }
}

task packageJavadoc(type: Jar, dependsOn: 'javadoc') {
    from javadoc.destinationDir
    classifier = 'javadoc'
}

task packageSources(type: Jar, dependsOn: 'classes') {
    from sourceSets.main.allSource
    classifier = 'sources'
}
 
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            
            artifact(packageSources)
            artifact(packageJavadoc)
            
            groupId = "${group}"
                        
            def versionPropsFile = new File("${projectDir}/version.properties")
    
            if(!versionPropsFile.exists()) {
                def versionProps = new Properties()
        
                versionProps['major'] = '1'
                versionProps['minor'] = '0'
                versionProps['revision'] = '0'
        
                if(versioning == 'auto') {
                    versionProps.store(versionPropsFile.newWriter(), null)
                }
                    
                version = "1.0r0"
            } else if(versionPropsFile.canRead()) {
                def versionProps = new Properties()
        
                versionProps.load(new FileInputStream(versionPropsFile))
        
                def major = versionProps['major']
                def minor = versionProps['minor']
                def revision = versionProps['revision'].toInteger() + 1
                    
                versionProps['revision'] = revision.toString()
                    
                if(versioning == 'auto') {
                    versionProps.store(versionPropsFile.newWriter(), null)
                }
        
                version = "${major}.${minor}r${revision}"
            }
            
            if(buildType == 'snapshot') {
                version = new Date().format('yy.MM') + "-SNAPSHOT"
            }
        }    
    }
}

task incrementMajor << {
    def versionPropsFile = new File("${projectDir}/version.properties")
    def versionProps = new Properties()
    
    if(!versionPropsFile.exists()) {
        versionProps['major'] = '1'
        versionProps['minor'] = '0'
        versionProps['revision'] = '0'
    } else {
        versionProps.load(new FileInputStream(versionPropsFile))
        versionProps['major'] = (versionProps['major'].toInteger() + 1).toString()
        versionProps['minor'] = '0'
        versionProps['revision'] = '0'
    }
    
    versionProps.store(versionPropsFile.newWriter(), null)
}

task incrementMinor << {
    def versionPropsFile = new File("${projectDir}/version.properties")
    def versionProps = new Properties()
    
    if(!versionPropsFile.exists()) {
        versionProps['major'] = '1'
        versionProps['minor'] = '0'
        versionProps['revision'] = '0'
    } else {
        versionProps.load(new FileInputStream(versionPropsFile))
        versionProps['minor'] = (versionProps['minor'].toInteger() + 1).toString()
        versionProps['revision'] = '0'
    }
    
    versionProps.store(versionPropsFile.newWriter(), null)
}

task version << {
    def versionPropsFile = new File("${projectDir}/version.properties")
    def versionProps = new Properties()
    
    if(!versionPropsFile.exists()) {
        versionProps['major'] = '1'
        versionProps['minor'] = '0'
        versionProps['revision'] = '0'
        
        versionProps.store(versionPropsFile.newWriter(), null)
        
        println 'Version: 1.0r0'
    } else {
        versionProps.load(new FileInputStream(versionPropsFile))
        
        def major = versionProps['major']
        def minor = versionProps['minor']
        def revision = versionProps['revision']
        
        println "Version: ${major}.${minor}r${revision}"
    }
}

